#lang sicp

(define (make-leaf symbol weight) (list 'leaf symbol weight))
(define (leaf? object) (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))

(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))

(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
(define (encode-symbol symbol tree)
  (define (element? x sequence)
    (cond ((null? sequence) false)
          ((eq? (car sequence) x) true)
          (else (element? x (cdr sequence)))))
  (define (help symbol tree)
    (cond ((leaf? tree) '())
          ((element? symbol (symbols (left-branch tree)))
           (cons 0 (help symbol (left-branch tree))))
          (else (cons 1 (help symbol (right-branch tree))))))
  (if (element? symbol (symbols tree))
      (help symbol tree)
      (error "symbol not in tree: ENCODE" symbol)))
